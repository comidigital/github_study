Git
Git은 폴더 안에 파일들을 시간여행이 가능하게 하는 평행 우주를 만드는 것이다.
시간 여행이 가능하다는 건 내가 수습하기 어려운 실수를 했거나 전이랑 뭐가 바뀌었는지 헷갈릴 때 언제든 폴더 내 상태를 과거로 돌릴 수 있다는 것이다. Ctrl+Z 와 같은 수준이 아니라 아예 모든 파일들의 저장된 상태를 좀 전으로, 어제로, 혹은 아예 맨 초기로 돌아 갈 수 있게 된다. 또는 과거로 돌아가서 필요한 것만 챙겨서 현재나 다른 과거로 가져올 수도 있게 된다. 이것은 예전처럼 매번 폴더를 압축해서 시점별로 저장해 둘 필요가 없다. 앞에서 이야기 한 평행우주를 만든다는 건 우리가 뭔가를 만들다가 메인 작업에서 해보기에는 위험이 있는 좀 실험적인 시도를 해보거나 고객이 무엇을 좋아할지 몰라서 다른 버전으로도 작업해보고 싶을 때, Git 이 없을 때는 이러한 작업을 폴더 통째로 따로 복사해서 각각에서 따로 작업해야 했었다. 하지만 Git은 폴더 안에 여러 평행우주를 생성해서 여기선 이 버전, 저기전 저 버전 자유자재로 우주들을 넘나들며 작업하다가 저쪽에서 작업하던 실험적 기능이 마음에 들면 이쪽 우주로 가져오고 할 수 있다는 것이다.

> git 사용법
git은 Command line Interface로 명령어를 입력하는 것과 마우스를 사용하는 GUI로 만들어진 대표적인 Source Tree로 사용할 수 있다.

- 준비물
git : https://git-scm.com
Visual Studio Code : https://code.visualstudio.com/Download
Source Tree : https://www.sourcetreeapp.com (설치 시 로그인은 회원가입 후 로그인)

- 폴더 만들기 : 원하는 위치에 사용할 폴더를 만든다.

- vs code 에서 git 사용하기
vs code 에서 해당 폴더를 선택한다. 새 파일 추가.
먼저 cat 이란 파일을 만들고 내용에 name: tom 으로 채우고, 저장한다.
두번째, mouse 라는 파일을 만들고 name: jerry 로 해서 저장한다.
이제 이 두 파일을 git에서 관리하도록 만든다.
//먼저 CLI로 하는 방법 : cd를 활용하여 해당 폴더로 이동.
vs code 에서 터미털을 연다. (Ctrl+`). 그러면 터미널의 디렉토리가 현재 폴더로 이동해 있다.
터미널에서 git init 을 입력하면 git 저장소가 만들어졌다는 메시지가 뜨면서 git 저장소가 만들어진다.
다음으로 이름과 이메일을 등록한다.
> git config user.name "comiDigitla"
> git config user.email "comidigital@naver.com"
탐색기에서 숨겨진 파일 보기를 하면 .git 폴더가 생성된 것을 볼 수 있다. 여기에 시공간이 저장된다. (숨겨진 파일을 지우고 소스트리_sourceTree 에서 해보자. .git 폴더가 생긴다.)

2. 현재 시점을 저장하기(타임캡슐에 넣어서 묻기)
먼저 타임캡슐을 묻을려면 타임캡슐에 파일을 담아야 한다.
담을 게 뭐가 있는지 git 으로 살펴 보자.
> git status

붉은 색의 아직 담기지 않는 파일들이 보인다. Untracted 는 git에서 아직 쳐다보지 않는다는 뜻이다. 붉은 색은 정확히는 새로운 파일들이 아니라 ‘이 파일들이 만들어졌다는 사실’들이다.
그럼 이 파일들을 타임캡슐에 담아 보자.
> git add -A     또는  > git add .
다시 status로 살펴 보면
> git status

Changes to be committed 이라고 뜬다. 이것은 ‘묻을 것들’이라고 보면 된다.
이제 묻어 보자. 묻을 때는 무엇인지 설명도 포함하여 묻는 것이 나중에 살펴 보기가 좋다.
> git commit -m "First Commit"

git status 로 살펴 보면 더이상 담아서 묻을 것이 없다고 뜬다. 이 상태에서 소스트리에서 보아도 없다고 뜬다.(조금 기다리면 된다. 아니면 새로 고침)

이제 새 파일을 하나 더 만들어 보자. 
dog 라고 하고 내용은 name: snoopy 라고 하자.
git 상태를 살펴 보자.
> git status
터미널에서는 이렇게 status를 입력하여 살펴 볼 수 있지만 소스트리에서는 바로 새로 묻을 파일이 생겼다는 것을 보여 준다. 그럼 소스트르에서 ? 파일 옆에 +를 눌러 캡슐에 담아준다. (캡슐 안으로 add 하는걸 git용어로는 stage한다고 한다.)
이후 아래 커밋 메시지를 적은 다음 커밋 버튼을 누르면 새 캡슐이 묻히면서 커밋이 된다.
아래 그림처럼 상태가 저장이 되는데 나중에 dog 캡슐을 파면 이것만 나오는 것이 아니라 줄줄이 다 엮여서 나오게 된다.

자 이제 cat 파일을 삭제 하여 보자.
vs code 에서 cat 파일의 마우스 오른버튼 클릭 후 삭제 한다. 그리고 mouse의 이름은 mickey로 바꿔주자. 그리고 penguin 펭귄 뽀로로를 새로 만들고 꼭! 저장한다.
이후 터미널에서 상태를 보자.
> git status

팽귄이 생성되었다는 사실 뿐 아니라, 마우스가 변경되었다는 사실과 캣이 삭제되었다는 사실도 알 수 있다.(위 그림에서 dog이 변경되었다는 것이 이 전에 저장을 안해서 여기에 뜬것.)
이것은 소스트리에서도 확인이 된다.

이 변화들을 같은 방식(편한 방식으로) 캡슐에 담아서 커밋으로 묻어버린다. (소스트리가 편함)
> git add .
> git commit -m "Add Modify Delete"

지금까지 묻은 캡슐들을 보자.
> git log       -----> vi 에디터로 보여주기 때문에 :q로 빠져 나온다.
소스 트리에서는 히스토리로 확인할 수 있다.

3.1 과거로 돌아가기 - Reset
캡슐을 파내서 과거의 상태로 돌아가는 방법에는 과감한 방법과 신중한 방법이 있다.
과감한 방법은 : 복원할 여지 없이 완전히 지우겠다는 것이다.
신중한 방법은 ; 언제든지 복원할 여지를 두는 것이다.
먼저 과감한 방법은
> git log로 돌아갈 시점은 일련번호를 확인한다. 일련번호는 앞 여섯자리만 알면 된다.
> git reset 일련번호6자리 --hard

현재 시점이 어디인지 메시지가 뜬다. 그때 파일들을 보면 penguin은 사라져 있고, 지웠던 cat은 다시 생겨났고, mouse의 이름도 되돌아 와있는 것을 볼 수 있다.

(이전에 dog 작업 시 dog을 저장하지 않음.)
다시 reset 전으로 변화들을 주고 저장한다. 커밋까지 한다.
이번에는 소스트리에서 보자.

이 커밋까지 초기화한다는 버튼을 누르고 옵션에서 Hard를 선택한다.

파괴적인 작업이라고 경고가 뜨는데 우리는 그냥 파괴할 꺼다.
그럼 역시 vs code 에서 보면 폴더는 예전 상태로 돌아가고 소스트리의 히스토리에서는 이 시점 이후 항목이 사라져 있는 걸 볼 수 있다.

3.2 과거로 돌아가기 - Revert
다시 전 상태로 만들어 놓자.

다시 git log를 검색한다.

이번에는 취소할 지점을 고른다. 여기서는 가장 최근 것을 고른다.
> git revert 000000

소스 트리에서 커밋초기화 시 Mix로 하면 된다. 다시 되돌리기 할 경우 ‘커밋 되돌리기’ 하면 된다.


4. 평행우주 넘나들기 - Branch
회사에서는 위 처럼 동물들을 관리하는데, 나는 뭔가 다른 시도를 해보고 싶을 때가 있다. 그렇다고 회사 파일들을 함부로 변경할 순 없다. 그럴 때 다른 평행우주를 만들어 넘어가자.
> git branch my_idea        // 나의 평행우주, branch를 만든다.


branch는 가지라는 뜻으로 현 시점에서 두 미래로 분기하겠다는 것이다.
다시 git branch를 입력해보자.
>git branch

여기에서 보면 master와 my_Idea가 있다. my_Idea로 넘어가기 위해서는 checkout을 다음과 같이 입력한다.
> git checkout my_Idea

아직은 아무 변화가 없다. 평행 우주는 원래 우주를 그대로 가져 오기 때문에 변화를 못 느낀다. 나만의 작업을 추가 해보자. mouse 는 삭제하고 dinosaur를 추가하고 name: dooly라고 저장한다.

그리고 캡슐에 넣어서 묻어둔다.
> git add -A
> git commit -m "Add Dinosaur"


이렇게 한참 작업하고 있는데 갑자기 상사가 들어온다고 가정하자. 따라서 원래 우주로 돌아가고자 한다.
> git checkout master

소스트리에서 브렌치 부분을 보면 master 와 my_Idea가 있을 것이다. 각각을 더블클릭해보면 상태들이 변화하는 것을 볼 수 있다.

소스트리에서 my_Idea를 다시 브랜치로 나누어 보자. my_Idea를 더블클릭하고 위 툴바에서 브랜치를 누른다. 이름을 my_another_Idea 입력하고 ‘새 브랜치 체크아웃’은 체크한다.

여기서는 고양이 이름을 nyang 이라고 바꾸고 캡슐에 넣어 묻어두자.
고양이 이름 변경 후
> git add -A
> git commit -m "Edit cat name"

이때 상사가 들어와서 master 브랜치에 dog 이름을 snoopy가 아닌 한국적으로 바꾸자고 한다. mong으로 바꾼다. 이후 내 아이디어도 권유 해본다.

dog -> name: mong
> git add -A
> git commit -m "Edit dog name"


내가 구상한 안을 보여 준다. my_anoter_Idea 로 가서 쥐는 빼고, 둘리라는 공룡을 넣어보자고 한다. 여기에는 고양이 이름도 우리식으로 바뀌어 있다. 상사가 마음에 들어서 적용하라고 한다.

5.1 다른 우주에서 가져오기 - Merge
my_another_Idea 브랜치를 master 브랜치로 가져 와야 한다.

my_another_Idea가 my_Idea를 포함하니까 my_another_Idea에서 작업하면 된다.
먼저 master 브랜치로 돌아온다.
> git checkout master

그리고 변호를 가져올 브랜치 이름을 적어 준다.
> git merge my_another_Idea

시각화 하여 보기.
> git log --graph --all --decorate


소스 트리에서는 master를 위치로 두고 my_another_Idea 를 마우스 오른쪽을 눌러 병합한다.
만약 브랜치에서 같은 파일의 같은 부분이 서로 다르게 수정이 되었다면 merge가 되지 않고 에러가 뜬다. 이럴때에는 어느 한쪽을 수정하고 
> git add .
> git commit
까지만 해서 커밋을 다 해결 한 후에 merge를 시켜준다.

5.2 다른 우주에서 가져오기 - Rebase
> git rebase my_another_Idea  또는 master

브랜치 지우기
> git branch -D my_another_Idea